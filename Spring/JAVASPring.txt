[SB1] Hướng dẫn @Component và @Autowired
	@Component : đánh dấu cho Spring Boot biết Class đó là Bean
	@Component là một Annotation (chú thích) đánh dấu trên các Class để giúp Spring biết nó là một Bean.
		Đánh dấu class bằng @Component
		Class này sẽ được Spring Boot hiểu là một Bean (hoặc dependency)
		Và sẽ được Spring Boot quản lý
	@Autowired : call class từ IoC ra
[SB2] @Autowired - @Primary - @Qualifier
	@Primary :  là annotation đánh dấu trên một Bean, giúp nó luôn được ưu tiên lựa chọn trong trường hợp có nhiều Bean cùng loại trong Context.
	@Qualifier : xác định tên của một Bean mà bạn muốn chỉ định inject.
[SB3] Spring Bean Life Cycle + @PostConstruct và @PreDestroy
	@PostConstruct
		là trước khi làm cái gì đó sẽ sử dụng hàm này
		ví dụ như ta khi bật server tại thời điểm bật muốn chạy 1 số chức năng gì khi mới bật ta sử dụng @PostConstruct để ưu tiên chức năng đó
		chạy trước
	@PreDestroy
		ví dụ như khi ta tắt server muốn đóng hoặc giải phóng tài nguyên trước khi đóng ta sử dụng @PreDestroy để sử lý các chức năng đó
[SB4] @Component vs @Service vs @Repository
	@controller
		public api để giao tiếp ở class nào đó
	@service
		là class xử lý nghiệp vụ
	@repository
		đánh dâu các class tương tác với database để trả data cho thằng service, từ thằng service trẢ lại data cho controller
	tất cả annotation trên đều là component nhưng đặt tên khác nhau để giúp chúng ta phân biệt các tầng với nhau
	
[SB5] Component Scan là gì?
	Trong trường hợp bạn muốn tuỳ chỉnh cấu hình cho Spring Boot chỉ tìm kiếm các bean trong một package nhất định thì có các cách sau đây
	Khi chỉ muốn quét(scan) class trong 1 package mong muốn
	# @ComponentScan("abc.com.packageName")
	lúc đó các class trong package này sẽ được scan và gọi ra
	Cách gọi 2:  @SpringBootApplication(scanBasePackages = "me.loda.spring.componentscan.others")
	Cách gọi nhiều package : @SpringBootApplication(scanBasePackages = {"abc.com.packageName", "abc.com.packageName2"})
[SB6] @Configuration và @Bean
	@Configuration : là Annotation đánh dấu trên 1 class cho phép Springboot hiểu được đây là class cấu hình, trong class sẽ có các @Bean, các @Bean này sẽ được chạy khi
	ứng dụng được start
	@Configuration : class cấu hình ví dụ như thay vì phải cấu hình kết nối với database nào đó thì chúng ta phải cấu hình trong file .xml thay vì như vậy
	ta cấu hình tại trong 1 class được định nghĩa @Configuration, khi khởi chạy server nó sẽ chạy vào các @Bean này đầu tiên
	@Bean : phải có được đánh dấu ở trên đầu method và class của method đó phải được đánh dâu @Configuration
	
[SB7] Spring Boot Application Config và @Value
	Trong thực tế không phải lúc nào chúng ta cũng nên để mọi thứ trong code của mình. Có những thông số tốt hơn hết nên được truyền từ bên ngoài vào ứng dụng, 
	để giúp ứng dụng của bạn dễ dàng thay đổi giữa các môi trường khác nhau.
	Để phục vụ điều này, chúng ta sẽ tìm hiểu về khái niệm config ứng dụng Spring Boot với application.properties
	application.properties
	Trong Spring Boot, các thông tin cấu hình mặc định được lấy từ file resources/applications.properties.
	Ví dụ, bạn muốn Spring Boot chạy trên port 8081 thay vì 8080:
		applicatoin.properties
			server.port = 8081
	@Value
	Trong trường hợp, bạn muốn tự config những giá trị của riêng mình, thì Spring Boot hỗ trợ bạn với annotation @Value
	Ví dụ, tôi muốn cấu hình cho thông tin database của tôi từ bên ngoài ứng dụng
		applicatoin.properties
			test.connection.mysql.url=jdbc:mysql://host1:33060/test
		@Value được sử dụng trên thuộc tính của class, Có nhiệm vụ lấy thông tin từ file properties và gán vào biến.
			public class AppConfig {
				// Lấy giá trị config từ file application.properties
				@Value("${test.connection.mysql.url}")
				String mysqlUrl;
			}
[SB8] Tạo Web Helloworld với @Controller + Thymeleaf
	@Controller là nơi tiếp nhận các thông tin request từ phía người dùng
	Thymeleaf là một Java Template Engine. Có nhiệm vụ xử lý và generate ra các file HTML, XML, v.v..
	Các file HMTL do Thymeleaf tạo ra là nhờ kết hợp dữ liệu và template + quy tắc để sinh ra một file HTML chứa đầy đủ thông tin.
	Việc của bạn là cung cấp dữ liệu và quy định template như nào, còn việc dùng các thông tin đó để render ra HTML sẽ do Thymeleaf giải quyết.
	Model ở đây là một object được Spring Boot đính kém trong mỗi response.
	Model chứa các thông tin mà bạn muốn trả về và Template Engine sẽ trích xuất thông tin này ra thành html và đưa cho người dùng.
SB9] Giải thích cách Thymeleaf vận hành + Expression + Demo Full
	https://loda.me/articles/sb9-gii-thch-cch-thymeleaf-vn-hnh-expression-demo-full
	Trong template thymeleaf, để lấy các thông tin trong Model. bạn sẽ sử dụng Thymeleaf Standard Expression.
	Model & View Trong Spring Boot
	Trong bài trước, tôi đã demo cách sử dụng đối tượng Model. Bây giờ tôi sẽ nói kĩ hơn một chút.
	Model là đối tượng lưu giữ thông tin và được sử dụng bởi Template Engine để generate ra webpage. Có thể hiểu nó là Context của Thymeleaf
	Model lưu giữ thông tin dưới dạng key-value.
	${...}: Giá trị của một biến.
	{...}: Giá trị của một biến được chỉ định (sẽ giải thích ở dưới)
	Ngoài ra, để lấy thông tin đặc biệt hơn:
	#{...}: Lấy message
	@{...}: Lấy đường dẫn URL dựa theo context của server

[SB10] @RequestMapping + @PostMapping + @ModelAttribute + @RequestParam + Web To-Do với Thymeleaf
	GET thường được truyền param tại URL
	POST thường được truyền param dưới dạng json trong body của request ,VD: tại body trong postman
		@ModelAttribute đánh dấu đối tượng (Object) được gửi lên bởi Form Request
	thường khi gọi trên URL đều là phương thức GET
	 @RequestParam dùng để đánh dấu một biến là request param trong request gửi lên server.
        Nó sẽ gán dữ liệu của param-name tương ứng vào biến
	@RequestMapping
		Trong trường hợp bạn muốn tất cả các method đều dùng chung một cách xử lý thì có thể sử dụng Annotation @RequestMapping.
		VD: @RequestMapping("api/v1"):được đặt trên class định nghĩa là các method trong class phải đi chung qua path này

[SB11] Hướng dẫn Spring Boot JPA + MySQL
	Spring Boot JPA là 1 hệ sinh thái SpringData, nó tạo ra 1  layer ở giữa tâng service vào database, giúp
	chúng ta thao tác với database 1 cách dễ dàng hơn, tự động config và giảm thiểu code thừa thãi
	Spring Boot JPA đã wrapper Hibernate và tạo ra một interface mạnh mẽ. Nếu như bạn gặp khó khăn khi làm việc với Hibernate thì đừng lo, 
	bạn hãy để Spring JPA làm hộ.
	###JpaRepository### là 1 interface
	Để sử dụng Spring JPA, bạn cần sử dụng interface JpaRepository.
	Yêu cầu của interface này đó là bạn phải cung cấp 2 thông tin:
	1.Entity (Đối tượng tương ứng với Table trong DB)
	2.Kiểu dữ liệu của khóa chính (primary key)
	@Repository - đánh dấu UserRepository là một Bean và chịu trách nhiệm giao tiếp với DB.
	public interface UserRepository extends JpaRepository<User, Long> {
	}
[SB12] Spring JPA Method + @Query
	@Query : viết câu query trực tiếp theo cách mình mong muốn
	##Đây là JPQL
		@Query("select u from User u where u.emailAddress = ?1")
		User myCustomQuery(String emailAddress);
	##Đây là Native SQL
		@Query(value = "select * from User u where u.email_address = ?1", nativeQuery = true)
		User myCustomQuery2(String emailAddress);
		Cách truyền tham số là gọi theo thứ tự các tham số của method bên dưới ?1, ?2
		Nếu bạn không thích sử dụng ?{number} thì có thể đặt tên cho tham số.
			@Query(value = "SELECT * FROM Users u WHERE u.status = :status and u.name = :name", nativeQuery = true)
			User findUserByNamedParamsNative(@Param("status") Integer status, @Param("name") String name);

[SB14] Restful API + @RestController + @PathVariable + @RequestBody
	Khác với @Controller là sẽ trả về một template. (Trả về HTML)
	@RestController trả về dữ liệu dưới dạng JSON,Các đối tượng trả về dưới dạng Object sẽ được Spring Boot chuyển thành JSON.
		Các đối tượng trả về rất đa dạng, bạn có thể trả về List, Map, v.v.. Spring Boot sẽ convert hết chúng thành JSON, mặc 
		định sẽ dùng Jackson converter để làm điều đó.
		Nếu bạn muốn API tùy biến được kiểu dữ liệu trả về, bạn có thể trả về đối tượng ResponseEntity của Spring cung cấp. 
		Đây là đối tượng cha của mọi response và sẽ wrapper các object trả về.
	@RequestBody
		Vì bây giờ chúng ta xây dựng API, nên các thông tin từ phía Client gửi lên Server sẽ nằm trong Body, và cũng dưới dạng JSON luôn.
		Tất nhiên là Spring Boot sẽ làm giúp chúng ta các phần nặng nhọc, nó chuyển chuỗi JSON trong request thành một Object Java. bạn 
		chỉ cần cho nó biết cần chuyển JSON thành Object nào bằng Annotation @RequestBody
	@PathVariable
		gần giống @RequestParam cũng truyền tham số lên URL để lấy ra kết qua trả về nhưng @RequestParam phải thêm : localhost/test/list?param=1 tại endpoint
		thì @PathVariable chỉ cần : localhost/test/list/1
[SB15] Exception Handling @ExceptionHandler + @RestControllerAdvice / @ControllerAdvice + @ResponseStatus
[SB24] RESTful API Document Tạo với Spring Boot + Swagger
	Swagger hỗ trợ gen document cho API


bài tập: code lại bài 1 và học lại lý thuyết  và code lại bài 2 và lý thuyết note lại nhưng điểm cần chú ý
「Jpa」Hibernate là gì?
	##Hibernate## là một thư viện ORM (Object Relational Mapping) mã nguồn mở giúp lập trình viên viết ứng dụng Java có thể map các objects ##(pojo)## 
		với hệ quản trị cơ sở dữ liệu quan hệ, và hỗ trợ thực hiện các khái niệm lập trình hướng đối tượng với cớ dữ liệu quan hệ.
		Hiểu ngắn gọn thì Hibernate sẽ là một layer đứng trung gian giữa ứng dụng và database, và chúng ta sẽ giao tiếp với Hibernate thay vì giao tiếp với database
		Để giao tiếp với Hibernate, chúng ta sẽ tạo ra một Class đại diện cho một Table. Và mọi dữ liệu từ Table trong database sẽ được Hibernate bind vào Class đó cho chúng ta.
	##POJO##(plain old Java object)
		là class đại diện cho một Table,về ý nghĩa thì nó là một class java thuần túy, rất thuần túy:
		1.All properties must public setter and getter methods (mọi biến đều phải có get/set)
		2.All instance variables should be private (mọi biến là thuộc tính thì nên là private)
「Jpa」 Hướng dẫn sử dụng Specification (Phần 1)
「Jpa」Hướng dẫn sử dụng @OneToOne
